service: message-board

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev

plugins:
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline-sqs
  - serverless-offline

custom:
  serverless-offline:
    noPrependStageInUrl: true

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      dbPath: .dynamodb

  serverless-offline-sns:
    port: 4002
    debug: false
    location: .build

  serverless-offline-sqs:
    autoCreate: true
    endpoint: http://localhost:9324
    region: ap-southeast-2

functions:
  helloWorld:
    handler: handler.helloWorld
    events:
      - http:
          path: hello
          method: get
          cors: true

  registerUser:
    handler: handler.registerUser
    events:
      - http:
          path: register
          method: post
          cors: true

  getUserByEmail:
    handler: handler.getUserByEmail
    events:
      - http:
          path: user
          method: get
          cors: true

  saveUserToDynamoDB:
    handler: handler.saveUserToDynamoDB
    events:
      - sns:
          arn: !Ref UserRegistrationTopic
          topicName: UserRegistrationTopic

  listAllBoards:
    handler: handler.listAllBoards
    events:
      - http:
          path: boards
          method: get
          request:
            parameters:
              querystrings:
                includeMessages: false
          cors: true

  createBoard:
    handler: handler.createBoard
    events:
      - http:
          path: boards
          method: post
          cors: true

  postMessage:
    handler: handler.postMessage
    events:
      - http:
          path: boards/{boardId}/messages
          method: post
          cors: true

  saveBoardToDynamoDB:
    handler: handler.saveBoardToDynamoDB
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CreateBoardQueue
              - Arn

  saveMessageToDynamoDB:
    handler: handler.saveMessageToDynamoDB
    events:
      - sns:
          arn: !Ref PostMessageTopic
          topicName: PostMessageTopic

resources:
  Resources:
    UserRegistrationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: UserRegistrationTopic

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    BoardsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BoardsTable
        AttributeDefinitions:
          - AttributeName: boardId
            AttributeType: S
        KeySchema:
          - AttributeName: boardId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MessagesTable
        AttributeDefinitions:
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: messageId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CreateBoardQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: create-board-queue

    PostMessageTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: PostMessageTopic
